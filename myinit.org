#+STARTUP: overview
* org mode setup
#+BEGIN_SRC emacs-lisp
  (defun efs/org-mode-setup ()
        (org-indent-mode)
        (variable-pitch-mode 1)
        (auto-fill-mode 0)
        (visual-line-mode 1)
        (setq evil-auto-indent nil))

  (use-package org
    :pin org
        :commands (org-capture org-agenda)
        ;; :hook (org-mode . efs/org-mode-setup)
        :config
        (setq org-ellipsis " ▾")

        (setq org-agenda-start-with-log-mode t)
        (setq org-log-done 'time)
        (setq org-log-into-drawer t)

        (setq org-agenda-files
              '("~/workx/OrgFiles/Tasks.org"
                "~/workx/OrgFiles/Habits.org"
                "~/workx/OrgFiles/Birthdays.org"))

        (require 'org-habit)
        (add-to-list 'org-modules 'org-habit)
        (setq org-habit-graph-column 60)

        (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

        (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

        ;; Save Org buffers after refiling!
        (advice-add 'org-refile :after 'org-save-all-org-buffers)

        (setq org-tag-alist
          '((:startgroup)
             ; Put mutually exclusive tags here
             (:endgroup)
             ("@errand" . ?E)
             ("@home" . ?H)
             ("@work" . ?W)
             ("agenda" . ?a)
             ("planning" . ?p)
             ("publish" . ?P)
             ("batch" . ?b)
             ("note" . ?n)
             ("idea" . ?i)))

        ;; Configure custom agenda views
        (setq org-agenda-custom-commands
         '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
              ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
              ((org-agenda-overriding-header "Next Tasks")))))

          ("W" "Work Tasks" tags-todo "+work-email")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))

        (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/workx/OrgFiles/Tasks.org" "Inbox")
                 "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")


            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/workx/OrgFiles/Journal.org")
                 "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/workx/OrgFiles/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

        (define-key global-map (kbd "C-c j")
          (lambda () (interactive) (org-capture nil "tt")))
        (efs/org-font-setup))

      (use-package org-bullets
        :ensure t
        :hook (org-mode . org-bullets-mode)
        :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (custom-set-variables
   '(org-directory "~/workx/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   )

  (setq org-file-apps
        (append '(
                  ("\\.pdf\\'" . "evince %s")
                  ) org-file-apps ))

  (global-set-key "\C-ca" 'org-agenda)

  (use-package org-ac
    :ensure t
    :init (progn
            (require 'org-ac)
            (org-ac/config-default)
            ))
  (global-set-key (kbd "C-c c") 'org-capture)4
  (setq org-agenda-files (list "~/workx/orgfiles/gcal.org"
                               "~/workx/orgfiles/i.org"
                               "~/workx/orgfiles/schedule.org"))

  (use-package noflet
    :ensure t)


      (defun efs/org-mode-visual-fill ()
        (setq visual-fill-column-width 100
              visual-fill-column-center-text t)
        (visual-fill-column-mode 1))

      (use-package visual-fill-column
        :hook (org-mode . efs/org-mode-visual-fill))

      (dolist (mode '(org-mode-hook
                    term-mode-hook
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(helm-minibuffer-history-key "M-p")
     '(org-agenda-files
       '("/home/lam/workx/OrgFiles/Tasks.org" "/home/lam/workx/OrgFiles/Habits.org"))
     '(package-selected-packages
       '(zenburn-theme color-theme auto-complete web-mode try lsp-tailwindcss embark wgrep consult company dap-mode helm-lsp lsp-ui emmet-mode go-mode dumb-jump whole-line-or-region helm ace-jump-mode visual-fill-column org-bullets forge evil-magit magit counsel-projectile projectile hydra evil-collection evil general helpful ivy-rich which-key rainbow-delimiters all-the-icons doom-modeline counsel swiper ivy command-log-mode use-package)))


  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  ;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+END_SRC

#+RESULTS:
: efs/org-babel-tangle-config

* Reveal.js
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)
  (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/")
  (setq org-reveal-mathjax t)
#+END_SRC

#+RESULTS:
: t
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
  (use-package elpy
    :ensure t
    :config
    (elpy-enable))
#+END_SRC
* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (progn
      (yas-global-mode 1)))
#+end_src

* Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+end_src

* Misc packages
#+begin_src emacs-lisp
  (global-hl-line-mode -1)
   (use-package beacon
     :ensure t
     :config
     (beacon-mode 1)
     ; (setq beacon-color "#666600")
   )
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))

  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))

  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

  (use-package iedit
    :ensure t)
  (setq save-interprogram-paste-before-kill t)
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
#+end_src

* Load other files
#+begin_src emacs-lisp
  (defun load-if-exists (f)
    ""
    (if (file-readable-p f)
	(load-file f)))
#+end_src

* Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
	  '(("django" . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
	  '(("css" . (ac-source-css-property))
	    ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t))
#+end_src
* Better shell
#+begin_src emacs-lisp
  (use-package better-shell
    :ensure t
    :bind (("C-'" . better-shell-shell)
           ("C-;" . better-shell-remote-open)))
#+end_src
* Elfeed
#+begin_src emacs-lisp
      (setq elfeed-db-directory "~/docx/shared/elfeeddb")
      (defun bjm/elfeed-show-all ()
      (interactive)
      (bookmark-maybe-load-default-file)
      (bookmark-jump "elfeed-all"))
    (defun bjm/elfeed-show-emacs ()
      (interactive)
      (bookmark-maybe-load-default-file)
      (bookmark-jump "elfeed-emacs"))
    (defun bjm/elfeed-show-daily ()
      (interactive)
      (bookmark-maybe-load-default-file)
      (bookmark-jump "elfeed-daily"))

    (defun bjm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

      (use-package elfeed
        :ensure t

        :bind (:map elfeed-search-mode-map
                      ("A" . bjm/elfeed-show-all)
                      ("E" . bjm/elfeed-show-emacs)
                      ("D" . bjm/elfeed-show-daily)
                      ("q" . bjm/elfeed-save-db-and-bury)
                    )
        )
  (use-package elfeed-goodies
    :ensure t
    :config
    (elfeed-goodies/setup))
  
      (use-package elfeed-org
        :ensure t
        :config
        (elfeed-org)
        (setq rmh-elfeed-org-files (list "~/docx/shared/elfeed.org")))


#+end_src

#+RESULTS:
: t
* Personal keymap
#+begin_src emacs-lisp
  (dotimes (n 10)
    (global-unset-key (kbd (format "C-%d" n)))
    (global-unset-key (kbd (format "M-%d" n)))
    )

  (defun org-agenda-show-agenda-and-todo (%optional arg)
    (interactive "P")
    (org-agenda arg "c")
    (org-agenda-fortnight-view))

  ;; set p my own map
  (define-prefix-command 'z-map)
  (global-set-key (kbd "C-1") 'z-map)

  (define-key z-map (kbd "m") 'mu4e)
  (define-key z-map (kbd "e") 'bjm/elfeed-load-db-and-open)
  (define-key z-map (kbd "1") 'gor-glocal-cycle)
  (define-key z-map (kbd "a") 'org-agenda-show-agenda-and-todo)
  (define-key z-map (kbd "s") 'flyspell-correct-word-before-point)
  (define-key z-map (kbd "i") (lambda () (interactive) (find-file "~/workx/orgfiles/i.org")))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (find-file ~/workx/orgfiles/i.org) |

* DumbJump
#+begin_src emacs-lisp
  (use-package dumb-jump)
#+end_src
* Ace windows for easy window switching
#+begin_src emacs-lips
  (use-package ace-window)
#+end_src

* Treemacs

* Dired
* Fix regex
#+begin_src emacs-lisp
  (use-package pcre2el
    :ensure t
    :config
    (pcre-mode))
#+end_src
* using swiper
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t
    )
#+end_src

#+RESULTS:
: /home/lam/.fzf/bin/fzf -f %s

* Magit
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

  (use-package git-timemachine
    :ensure t
    )
#+end_src

#+RESULTS:


* Music
#+begin_src emacs-lisp
  (use-package mingus)
  ;; (use-package simple-mpc)
#+end_src

* PDF tools
#+begin_src emacs-lisp
  (use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install)
  )
#+end_src
